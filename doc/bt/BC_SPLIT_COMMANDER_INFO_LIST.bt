//--------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: BC_SPLIT_COMMANDER_INFO_LIST.bt
//   Authors: Salman T. Khan, exec
//   Version: i370844
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//   - i370844: Socket/Equip Properties (Options) initial structure figured out
//------------------------------------------------

#include "inc/common.bt"

typedef struct
{
    short propertiesSize;
    if (propertiesSize > 0) {
        getProperties(propertiesSize);
        int64 l1;
        short optionSize;
        if (optionSize > 0)
        {
            local int halfCount = optionSize / 2;
            local int i = 0;
            for (i = 0; i < halfCount; i++)
            {
                lpString optionName; // SealOption_2
                byte b1; // 1
                lpString optionType; // MATK;PATK
                lpString optionValue; // SealOptionValue_2
                byte b2; // 0
                int value; // 357
            }
        }
    }
}
EquipProperties <optimize=false>;

typedef struct
{
    EquipProperties properties[EquipSlotCount];
}
Equip <optimize=false>;

typedef struct
{
    lpString name;
    lpString resetTime;
}
ResetTimeEntry <optimize=false>;

typedef struct
{
    short index;
    int64 worldId;
    int i1;
    int i2;
    int i3;
    int i4;
    short s1;
    short propertiesSize;
    int i5;
    if (i5 > 0)
    {
        local int i = 0;
        for (i = 0; i < i5; i++)
        {
            lpString str1;
            lpString str2;
            int i6;
        }
    }
} SocketInfo <optimize=false>;

typedef struct
{
    int64 worldId;
    int i1;
    int i2;
    int i3;
    int i4;
    short s1;
    short propertiesSize;
    int i5;
    if (i5 > 0)
    {
        local int i = 0;
        for (i = 0; i < i5; i++)
        {
            lpString str1;
            lpString str2;
            int i6;
        }
    }
} SocketInfoEnd <optimize=false>;

typedef struct
{
    int64 l1;
    short count;
    //byte bin[count*30];
    SocketInfo socketInfo[count];
}
Socket <optimize=false>;

typedef struct
{
    APPEARANCE_BARRACK_PC abpc;
    Equip equip;
    //byte bin[8];
    short socketCount;
    if (socketCount > 0)
    {
        switch(socketCount)
        {
            case 1:
                Socket socket;
                break;
            default:
                Socket sockets[socketCount];
                break;
        }
    }
    byte b1;
    byte b2;
    byte b3;
    byte b4;
    // maybe job history?
    short jobIdCount;
    short jobIds[jobIdCount];
    
    int i1;
    int i2;
    int64 characterId <format=hex>;
    
    short resetTimeCount;
    if (resetTimeCount > 0)
        ResetTimeEntry resetTimes[resetTimeCount];
}
BARRACK_PC <read=readBARRACK_PC>;

string readBARRACK_PC(BARRACK_PC &v)
{
    return v.abpc.appearancePc.name;
}

ServerHeaderDynamic header;
int32 characterCount;
int64 accountId;
byte b1;
byte b2;
byte b3;

BARRACK_PC barrackPc[characterCount] <optimize=false>;
